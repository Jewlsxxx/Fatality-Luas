-- Capture any funtions / classes / objects
local Menu              = fatality.menu
local Config            = fatality.config
local Renderer          = fatality.render
local Callbacks         = fatality.callbacks
local EntityList        = csgo.interface_handler:get_entity_list()
local Globals           = csgo.interface_handler:get_global_vars()
local Events            = csgo.interface_handler:get_events()
local Vector            = csgo.vector3
local Vector2D          = csgo.vector2

local function Color(r, g, b, a)
    return 
    {
        r = r or 255,
        g = g or 255,
        b = b or 255,
        a = a or 255,
        c = csgo.color(r or 255, g or 255, b or 255, a or 255),
    }
 end

local ConfigItems = 
{
    Toggle = Config:add_item("Shot Logger Toggle", 0)
}

Menu:add_checkbox("Shot Positions", "Visuals", "Misc", "Beams", ConfigItems["Toggle"])


-- Visual Data
local ShotLogger = 
{
    Size        = 3;
    TimeToLast  = 5;
    GlitchAnimWait = 0.2;
    WaitTime    = 4.5,
}

local Colors = 
{
    EffectPink      = Color(255, 0, 72); -- Color of pink in glitch effect
    EffectBlue      = Color(50, 52, 255);-- Color of blue in glitch effect
    Purple          = Color(30, 30, 100);
}

local Fonts = 
{
    Verdana =  Renderer:create_font("verdana", 11, 400, false );
}

-- Store Shot Info
local ShotData = {}


local function ClearData()
    ShotData = {}
end

local function Clamp(Value, Min, Max)
    return Value < Min and Min or (Value > Max and Max or Value)
end

local function OnPaint()
    if not ConfigItems["Toggle"]:get_bool() or not EntityList:get_localplayer() then
        ClearData()
        return end

    for i, v in pairs(ShotData) do
        if ShotData[i]["AnimTime"] < 0 then
            ShotData[i] = nil
            goto continue
        end
        local ScreenPos = csgo.vector3(v.Position.x, v.Position.y, v.Position.z) --
        local Offset = ShotLogger["Size"]
        ShotData[i]["AnimTime"] = ShotData[i]["AnimTime"] - ((1 / ShotLogger["TimeToLast"]) * Globals.frametime)
        ShotData[i]["FadeWait"] = ShotData[i]["FadeWait"] - ((1 / ShotLogger["WaitTime"]) * Globals.frametime)

        if ShotData[i]["FadeWait"] < 0 then
            ShotData[i]["FadeAnim"] = ShotData[i]["FadeAnim"] - ((1 / (ShotLogger["TimeToLast"] - ShotLogger["WaitTime"])) * Globals.frametime)
            if ShotData[i]["FadeAnim"] <= 0 then
                ShotData[i]["FadeAnim"] = 0
            end
        end
        if ScreenPos:to_screen() == false then
            goto continue end
        
        local Alpha = math.floor(255 * ShotData[i]["FadeAnim"])
        local EffectPink = Colors["EffectPink"]
        local EffectBlue = Colors["EffectBlue"]
        EffectPink = Color(EffectPink.r, EffectPink.g, EffectPink.b, Alpha)
        EffectBlue = Color(EffectBlue.r, EffectBlue.g, EffectBlue.b, Alpha)

        if v["Damage"] ~= -1 then
            local OffPosAmnt = 1
            local Move =  (OffPosAmnt * 2) * v["GlitchTime"]
            local Move2 =  (OffPosAmnt * 2) * (1 - v["GlitchTime"])
            local ItemPos = Vector2D(ScreenPos.x + 4, ScreenPos.y - 11)

            local GlitchIncrement = ((1 / ShotLogger["GlitchAnimWait"]) * Globals.frametime) 
            v["GlitchTime"] = Clamp(v["GlitchTime"] + (v["GlitchSwitch"] and GlitchIncrement or -GlitchIncrement), 0, 1) -- Clamp animtime to wanted alphas
            if v["GlitchTime"] == 0 then -- Switch when at alpha
                v["GlitchSwitch"] = true
            elseif v["GlitchTime"] == 1 then
                v["GlitchSwitch"] = false
            end


            Renderer:text(Fonts.Verdana, ItemPos.x - OffPosAmnt + Move, ItemPos.y + OffPosAmnt - Move, v["Damage"], EffectPink.c)
            Renderer:text(Fonts.Verdana, ItemPos.x - OffPosAmnt + Move2, ItemPos.y + OffPosAmnt - Move2, v["Damage"], EffectBlue.c)
            Renderer:text( Fonts["Verdana"], ItemPos.x, ItemPos.y, v["Damage"], Color(255, 255, 255, Alpha).c)
        end
        Renderer:rect_filled(ScreenPos.x - Offset, ScreenPos.y, Offset * 2 + 2, 2, Color(255, 255, 255, Alpha).c)
        Renderer:rect_filled(ScreenPos.x, ScreenPos.y - Offset, 2, Offset * 2 + 2, Color(255, 255, 255, Alpha).c)
        Renderer:rect_filled(ScreenPos.x, ScreenPos.y, 2, 2, EffectPink.c)


        ::continue::
    end
end

local function OnRegisteredShot(Shot)
    if not ConfigItems["Toggle"]:get_bool() or not EntityList:get_player(Shot.victim) then
        return end

    ShotData[#ShotData + 1] = 
    {
        FadeWait    = 1;
        FadeAnim    = 1;
        AnimTime    = 1;
        GlitchTime  = 1;
        GlitchSwitch = false;
        Position    = Shot.hit_damage == -1 and Shot.target_hitpos or Shot.hitpos;
        Damage      = Shot.hit_damage;
    }
end

-- Called when an event is triggered (Game events: https://wiki.alliedmods.net/Counter-Strike:_Global_Offensive_Events)
local function GameEvents(Event)
    local EventName = Event:get_name()
    if EventName == "round_start" then
        ClearData()
    end
end

Events:add_event("round_start")

Callbacks:add("registered_shot", OnRegisteredShot)
Callbacks:add("events", GameEvents)
Callbacks:add("paint", OnPaint)
