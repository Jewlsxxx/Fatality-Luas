{
    //------------------------------------------
    // Instances 
    //------------------------------------------

    "fatality.win":{
        "prefix":   "fatality",
        "body":     "fatality.${2|render,config,menu,callbacks,math,input,indicator,screen_size,draw_hitgroup|}"
    },

    "fatality.win csgo":{
        "prefix":   "csgo.",
        "body":     "csgo.${2|vector3,vector2,angle,interface_handler|}"
    },

    "fatality.win interface_handler":{
        "prefix":   "csgo.interface_handler",
        "body":     "csgo.interface_handler:${2|get_engine_client(),get_global_vars(),get_entity_list(),get_cvar(),get_events()|}"
    },


    //------------------------------------------
    // Render fucntions
    //------------------------------------------

    "fatality.win render":{
        "prefix":   "render",
        "body":     "${1:render}:${2|rect_filled,rect,rect_fade,create_font,text,text_size,indicator,screen_size,draw_hitgroup|}"
    },

    "fatality.win rect filled":{
        "prefix":       "rect_filled",
        "body":         "rect_filled(${1:x}, ${2:y}, ${3:width}, ${4:height}, ${5:color})",
        "description":  "Syntax:\n x: horizontal position\n y: vertical position\n width: width in pixels\n height: height in pixels\n color: csgo.color object"
    },

    "fatality.win rect":{
        "prefix":       "rect",
        "body":         "rect(${1:x}, ${2:y}, ${3:width}, ${4:height}, ${5:color})",
        "description":  "Syntax:\n x: horizontal position\n y: vertical position\n width: width in pixels\n height: height in pixels\n color: csgo.color object"
    },

    "fatality.win rect fade":{
        "prefix":       "rect_fade",
        "body":         "rect_fade(${1:x}, ${2:y}, ${3:width}, ${4:height}, ${5:color}, ${6: color2}, ${7|horizontal,true,false|})",
        "description":  "Syntax:\n font_name:\n y: vertical position\n width: width in pixels\n height: height in pixels\n color: first gradient color\n color2: second gradient color\n horizontal: true for horizontal gradient false for vertical"
    },

    "fatality.win create font":{
        "prefix":   "create_font",
        "body":     "create_font(${1:font_name}, ${2:size}, ${3:weight}, ${4|outline,true,false|})",
        "description": [
            "Syntax:\n font_name: name of font to use. ex \"verdana\"\n size: size of font\n weight: thickness of font\n outline: true to use outline\n",
            "Returns:\n csgo.font object used in render:text",
        ]
    },

    "fatality.win text":{
        "prefix":       "text",
        "body":         "text(${1:font}, ${2:x}, ${3:y}, ${5: text}, ${4:color})",
        "description":  "Syntax:\n font: csgo.font object from render:create_font\n x: horizontal position\n y: vertical position\n text: string to render\n color: csgo.color object"
    },

    "fatality.win text size":{
        "prefix":   "text_size",
        "body":     "text(${1:font}, ${2:text})",
        "description": [
            "Syntax:\n font: csgo.font object from render:create_font\n text: string to calculate size\n",
            "Returns:\n csgo.vector2 object with text size in pixels"
        ]
    },

    "fatality.win indicator":{
        "prefix":       "indicator",
        "body":         "indicator(${1:x}, ${2:y}, ${3:text}, ${4|active,true,false|}, ${5:bar_progress})",
        "description":  "Syntax:\n x: horizontal position\n y: vertical position\n text: string to render\n active: true if indicator is active\n bar_progress: value of progress (0 - 1) or -1 for no bar",
    },

    "fatality.win screen size":{
        "prefix":       "screen_size",
        "body":         "screen_size()",
        "description":  "Returns:\n csgo.vector2 object with screen width and height",
    },

    "fatality.win draw hitgroup":{
        "prefix":       "draw_hitgroup",
        "body":         "draw_hitgroup(${1:player}, ${2:matrix}, ${3|hitgroup,-1|}, ${4:duration, ${5:color})",
        "description":  "Syntax:\n player: csgo.player object\n matrix: csgo.matrix3x4_t object\n hitgroup: hitgroup to draw or -1 for all hitgroups\n duration: time in seconds for how long to draw\n color: csgo.color object",
    },

    //------------------------------------------
    // Config fucntions
    //------------------------------------------

    "fatality.win config":{
        "prefix":   "config",
        "body":     "${1:config}:${2|add_item,get_item,get_weapon_setting|}"
    },

    "fatality.win add item":{
        "prefix":       "add_item",
        "body":         "add_item(${1:item_name}, ${2|default_value,0|})",
        "description":  [
            "Syntax:\n item_name: config item name",
            "Returns:\n csgo.config object"
        ]
    },

    "fatality.win get item":{
        "prefix":       "get_item",
        "body":         "get_item(${1:item_name})",
        "description":  [
            "Syntax:\n item_name: config item name",
            "Returns:\n csgo.config object"
        ]
    },

    "fatality.win get weapon setting":{
        "prefix":       "get_weapon_setting",
        "body":         "get_weapon_setting(${1|weapon_name,\"autosniper\",\"scout\",\"awp\",\"pistol\",\"other\"|}, ${2|item_name,\"hitchance\",\"mindmg\",\"mindmg_override\",\"damage_accuracy\",\"ignore_limbs\",\"refine_shot\",\"autorevolver\",\"scout_jumpshot\",\"hitboxes.neck\",\"hitboxes.legs\",\"hitboxes.feet\",\"hitboxes.arms\",\"pointscales.neck\",\"pointscales.legs\",\"pointscales.feet\",\"pointscales.arms\",\"autostop_on_key\",\"predictive_autostop\",\"autoscope\",\"fallback_mode\",\"baim.air\",\"baim.lethal\",\"fallback_when.moving\",\"fallback_when.standing\",\"fallback_when.limbs\"|})",
        "description":  [
            "Syntax:\n weapon_name: weapon name\n item_name: setting name",
            "Returns:\n csgo.config object"
        ]
    },
    
    //------------------------------------------
    // Menu fucntions
    //------------------------------------------

    "fatality.win menu":{
        "prefix":   "menu",
        "body":     "${1:menu}:${2|get_reference,add_checkbox,add_slider,add_combo,add_combo,add_multi_combo,add_button|}"
    },

    "fatality.win get reference":{
        "prefix":       "get_reference",
        "body":         "get_reference(${1|tab_name,\"rage\",\"visuals\",\"misc\",\"inventory\",\"legit\"|}, ${2|subtab_name,\"aimbot\",\"anti-aim\",\"esp\",\"models\",\"misc\"|}, ${3:group_name}, ${4:control_name})",
        "description":  [
            "Syntax:\n tab_name: name of tab\n subtab_name: name of subtab\n group_name: name of group\n control_name: name of control",
            "Returns:\n csgo.config object"
        ]
    },

    "fatality.win add checkbox":{
        "prefix":       "add_checkbox",
        "body":         "add_checkbox(${1:control_name}, ${2|tab_name,\"rage\",\"visuals\",\"misc\",\"inventory\",\"legit\"|}, ${3|subtab_name,\"aimbot\",\"anti-aim\",\"esp\",\"models\",\"misc\"|}, ${4:group_name}, ${5:config_item})",
        "description":  "Syntax:\n control_name: name of control\n tab_name: name of tab\n subtab_name: name of subtab\n group_name: name of group\n config_item: csgo.config object",
    },

    "fatality.win add slider":{
        "prefix":       "add_slider",
        "body":         "add_slider(${1:control_name}, ${2|tab_name,\"rage\",\"visuals\",\"misc\",\"inventory\",\"legit\"|}, ${3|subtab_name,\"aimbot\",\"anti-aim\",\"esp\",\"models\",\"misc\"|}, ${4:group_name}, ${5:config_item}, ${6:min}, ${7:max}, ${8:step})",
        "description":  "Syntax:\n control_name: name of control\n tab_name: name of tab\n subtab_name: name of subtab\n group_name: name of group\n config_item: csgo.config object\n min: minimum slider value\n max: maximum slider value\n step: slider increment",
    },

    "fatality.win add combo":{
        "prefix":       "add_combo",
        "body":         "add_combo(${1:control_name}, ${2|tab_name,\"rage\",\"visuals\",\"misc\",\"inventory\",\"legit\"|}, ${3|subtab_name,\"aimbot\",\"anti-aim\",\"esp\",\"models\",\"misc\"|}, ${4:group_name}, ${5:config_item})",
        "description":  "Syntax:\n control_name: name of control\n tab_name: name of tab\n subtab_name: name of subtab\n group_name: name of group\n config_item: csgo.config object",
    },

    "fatality.win add multi combo":{
        "prefix":       "add_multi_combo",
        "body":         "add_multi_combo(${1:control_name}, ${2|tab_name,\"rage\",\"visuals\",\"misc\",\"inventory\",\"legit\"|}, ${3|subtab_name,\"aimbot\",\"anti-aim\",\"esp\",\"models\",\"misc\"|}, ${4:group_name}, ${5:config_item})",
        "description":  "Syntax:\n control_name: name of control\n tab_name: name of tab\n subtab_name: name of subtab\n group_name: name of group\n config_item: non needed config item",
    },

    "fatality.win combo add":{
        "prefix":       ["combo_add_item", "combo add_item"],
        "body":         "add_item(${1:item_name}, ${2:config_value})",
        "description":  "Syntax:\n item_name: combo item name\n config_value: csgo.config value",
    },

    "fatality.win add button":{
        "prefix":       "add_button",
        "body":         "add_button(${1:control_name}, ${2|tab_name,\"rage\",\"visuals\",\"misc\",\"inventory\",\"legit\"|}, ${3|subtab_name,\"aimbot\",\"anti-aim\",\"esp\",\"models\",\"misc\"|}, ${4:group_name}, ${5:callback})",
        "description":  "Syntax:\n control_name: name of control\n tab_name: name of tab\n subtab_name: name of subtab\n group_name: name of group\n callback: function to be called when pressed",
    },

    //------------------------------------------
    // Callback functions
    //------------------------------------------

    "fatality.win callbacks":{
        "prefix":   "callbacks",
        "body":     "${1:callbacks}:${2:add}"
    },

    "fatality.win callback add":{
        "prefix":       "add",
        "body":         "add(${1|callback_name,\"paint\",\"registered_shot\",\"events\"|}, ${2:callback})",
        "description":  [
            "Use:\n sets a function as a callback",
            "Syntax:\n callback_name: callback name\n callback: function to be called",
        ]
    },

    //------------------------------------------
    // Math functions
    //------------------------------------------

    "fatality.win math":{
        "prefix":   "math",
        "body":     "${1:math}:${2:calc_angle}"
    },

    "fatality.win calc angle":{
        "prefix":       "calc_angle",
        "body":         "calc_angle(${1:point_one}, ${1:point_two})",
        "description":  [
            "Syntax:\n point_one: first position. csgo.vector3 object\n point_two: second position. csgo.vector3 object",
            "Returns:\n csgo.angle object"
        ]
    },

    //------------------------------------------
    // Input functions
    //------------------------------------------

    "fatality.win input":{
        "prefix":   "input",
        "body":     "${1:input}:${2|is_key_down,get_mouse_pos|}"
    },

    "fatality.win is key down":{
        "prefix":       "is_key_down",
        "body":         "is_key_down(${1:key})",
        "description":  [
            "Syntax:\n key: virtual key code. (https://docs.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes)",
            "Returns:\n true if key is held down"
        ]
    },

    "fatality.win get mouse pos":{
        "prefix":       "get_mouse_pos",
        "body":         "get_mouse_pos()",
        "description":  "Returns:\n csgo.vector2 object with cursor coordinates"
    },

    //------------------------------------------
    // Config functions
    //------------------------------------------
    
    "fatality.win get int":{
        "prefix":       "get_int",
        "body":         "get_int()",
        "description":  "Returns:\n integer value of config item"
    },

    "fatality.win get float":{
        "prefix":       "get_float",
        "body":         "get_float()",
        "description":  "Returns:\n floating point value of config item"
    },

    "fatality.win get bool":{
        "prefix":       "get_bool",
        "body":         "get_bool()",
        "description":  "Returns:\n boolean value of config item"
    },

    "fatality.win get color":{
        "prefix":       "get_color",
        "body":         "get_color()",
        "description":  "Returns:\n csgo.color value of config item"
    },

    "fatality.win set int":{
        "prefix":       "set_int",
        "body":         "set_int(${1:value})",
        "description":  "Syntax:\n value: integer value to assign to the config item"
    },

    "fatality.win set float":{
        "prefix":       "set_float",
        "body":         "set_float(${1:value})",
        "description":  "Syntax:\n value: floating point value to assign to the config item"
    },

    "fatality.win set bool":{
        "prefix":       "set_bool",
        "body":         "set_bool(${1:value})",
        "description":  "Syntax:\n value: boolean value to assign to the config item"
    },

    "fatality.win set color":{
        "prefix":       "set_color",
        "body":         "set_color(${1:value})",
        "description":  "Syntax:\n value: csgo.color value to assign to the config item"
    },

    //------------------------------------------
    // Global values
    //------------------------------------------

    "fatality.win globals":{
        "prefix":   "globals",
        "body":     "${1:globals}.${2|realtime,curtime,frametime,framecount,tickcount,interval_per_tick|}"
    },

    //------------------------------------------
    // Entity list functions
    //------------------------------------------

    "fatality.win entity list":{
        "prefix":   ["entitylist", "entity_list"],
        "body":     "${1:entitylist}:${2|get_player,get_player_from_id,get_from_handle,get_max_players,get_max_entities,get_localplayer|}"
    },

    "fatality.win get player":{
        "prefix":       "get_player",
        "body":         "get_player(${1:index})",
        "description":  [
            "Syntax:\n index: players index (1 - get_max_players())",
            "Returns:\n csgo.player object",
        ]
    },

    "fatality.win get player from id":{
        "prefix":       "get_player_from_id",
        "body":         "get_player_from_id(${1:user_id})",
        "description":  [
            "Syntax:\n user_id: player's userid. (gotten from events)",
            "Returns:\n csgo.player object",
        ]
    },

    "fatality.win get entity":{
        "prefix":       "get_entity",
        "body":         "get_entity(${1:index})",
        "description":  [
            "Syntax:\n index: entities index (0 - get_max_entities())",
            "Returns:\n csgo.entity object",
        ]
    },

    "fatality.win get from handle":{
        "prefix":       "get_from_handle",
        "body":         "get_from_handle(${1:handle})",
        "description":  [
            "Syntax:\n handle: entities handle",
            "Returns:\n csgo.entity object",
        ]
    },

    "fatality.win get max players":{
        "prefix":       "get_max_players",
        "body":         "get_max_players()",
        "description":  "Returns:\n max number of players allowed on the server",
    },

    "fatality.win get max entities":{
        "prefix":       "get_max_entities",
        "body":         "get_max_entities()",
        "description":  "Returns:\n highest entity index",
    },

    "fatality.win get local player":{
        "prefix":       "get_localplayer",
        "body":         "get_localplayer()",
        "description":  "Returns:\n local players csgo.player object",
    },

    //------------------------------------------
    // Engine functions
    //------------------------------------------

    "fatality.win engine client": {
        "prefix":   "engine",
        "body":     "${1:engine}:${2|client_cmd_unrestricted,client_cmd,is_in_game,is_connected,get_ping,get_map_name,in_thirdperson|}"
    },

    "fatality.win client cmd unrestricted":{
        "prefix":       "client_cmd_unrestricted",
        "body":         "client_cmd_unrestricted(${1:cmd})",
        "description":  [
            "Use:\n executes a console command without restrictions",
            "Syntax:\n cmd: string command to be sent"
        ],
    },

    "fatality.win client cmd":{
        "prefix":       "client_cmd",
        "body":         "client_cmd(${1:cmd})",
        "description":  [
            "Use:\n executes a console command",
            "Syntax:\n cmd: string command to be sent"
        ],
    },

    "fatality.win is in game":{
        "prefix":       "is_in_game",
        "body":         "is_in_game()",
        "description":  "Returns:\n true if you are in a game",
    },

    "fatality.win is connected":{
        "prefix":       "is_connected",
        "body":         "is_connected()",
        "description":  "Returns:\n true if you are connected to a server",
    },

    "fatality.win get ping":{
        "prefix":       "get_ping",
        "body":         "get_ping()",
        "description":  "Returns:\n your round trip ping",
    },

    "fatality.win get map name":{
        "prefix":       "get_map_name",
        "body":         "get_map_name()",
        "description":  "Returns:\n current maps name",
    },

    "fatality.win in thirdperson":{
        "prefix":       "in_thirdperson",
        "body":         "in_thirdperson()",
        "description":  "Returns:\n true if you are currently in thirdperson",
    },

    //------------------------------------------
    // Console functions
    //------------------------------------------

    "fatality.win console": {
        "prefix":   ["console", "cvar"],
        "body":     "${1:console}:${2|find_var,print_console,print_dev_console|}"
    },

    "fatality.win find var":{
        "prefix":       "find_var",
        "body":         "find_var(${1:var_name})",
        "description":  [
            "Syntax:\n var_name: string variable name. ex: \"sv_cheats\"",
            "Returns:\n csgo.cvar variable",
        ],
    },

    "fatality.win print console":{
        "prefix":       "print_console",
        "body":         "print_console(${1:msg})",
        "description":  "Syntax:\n msg: string to print to console"
    },

    "fatality.win print dev console":{
        "prefix":       "print_console",
        "body":         "print_console(${1:msg})",
        "description":  [
            "Use:\n prints to dev console. (top left)",
            "Syntax:\n msg: string to print to dev console console"
        ]
    },

    "fatality.win set string":{
        "prefix":       "set_string",
        "body":         "set_string(${1:value})",
        "description":  [
            "Use:\n sets convar to string value",
            "Syntax:\n value: string set value to"
        ]
    },

    "fatality.win unlock":{
        "prefix":       "unlock",
        "body":         "unlock()",
        "description":  "Use:\n unlocks protected convars. ex: sv_cheats",
    },


    //------------------------------------------
    // Event functions
    //------------------------------------------

    "fatality.win events": {
        "prefix":   "events",
        "body":     "${1:events}:${2:add_event}"
    },

    "fatality.win add event":{
        "prefix":       "add_event",
        "body":         "add_event(${1:event_name})",
        "description":  [
            "Use:\n adds an event to the \"events\" callback",
            "Syntax:\n event_name: event name to add. https://wiki.alliedmods.net/Counter-Strike:_Global_Offensive_Events"
        ]
    },

    //------------------------------------------
    // Debug overlay functions
    //------------------------------------------

    "fatality.win debug overlay": {
        "prefix":   ["debugoverlay", "debug_overlay"],
        "body":     "${1:debugoverlay}:${2|add_box_overlay, add_line_overlay|}"
    },

    "fatality.win add box overlay":{
        "prefix":       "add_box_overlay",
        "body":         "add_box_overlay(${1:origin}, ${2:mins}, ${3:maxs}, ${4:angle}, ${5:color}, ${6:duration})",
        "description":  [
            "Use:\n adds a box in 3D space",
            "Syntax:\n origin: csgo.vector3 box origin\n mins: csgo.vector3 relative mins\n max: csgo.vector3 relative maxs\n angle: csgo.angle\n color: csgo.color box color\n duration: time to last in seconds"
        ]
    },

    "fatality.win add line overlay":{
        "prefix":       "add_line_overlay",
        "body":         "add_line_overlay(${1:point_one}, ${2:point_two}, ${3:color}, ${4:skip_occlusion}, ${5:duration })",
        "description":  [
            "Use:\n adds a box in 3D space",
            "Syntax:\n point_one: csgo.vector3 starting position\n point_two: csgo.vector3 end position\n color: csgo.color line color\n skip_occlusion: true to draw through walls\n duration: time to last in seconds"
        ]
    },

    //------------------------------------------
    // Entity functions
    //------------------------------------------

    "fatality.win is player":{
        "prefix":       "is_player",
        "body":         "is_player()",
        "description":  "Returns:\n true if entity is a player",
    },

    "fatality.win is dormant":{
        "prefix":       "is_dormant",
        "body":         "is_dormant()",
        "description":  "Returns:\n true if entity is dormant",
    },

    "fatality.win get index":{
        "prefix":       "get_index",
        "body":         "get_index()",
        "description":  "Returns:\n entities server index",
    },

    "fatality.win get class id":{
        "prefix":       "get_class_id",
        "body":         "get_class_id()",
        "description":  "Returns:\n entities class id",
    },

    "fatality.win get var int":{
        "prefix":       "get_var_int",
        "body":         "get_var_int(${1:netvar_name})",
        "description":  [
            "IMPORTANT!!! CURRENTLY BROKEN",
            "Syntax:\n netvar_name: netvar to get",
            "Returns:\n netvar as an integer value"
        ]
    },

    "fatality.win get var short":{
        "prefix":       "get_var_short",
        "body":         "get_var_short(${1:netvar_name})",
        "description":  [
            "IMPORTANT!!! CURRENTLY BROKEN",
            "Syntax:\n netvar_name: netvar to get",
            "Returns:\n netvar as a short value"
        ]
    },

    "fatality.win get var handle":{
        "prefix":       "get_var_handle",
        "body":         "get_var_handle(${1:netvar_name})",
        "description":  [
            "IMPORTANT!!! CURRENTLY BROKEN",
            "Syntax:\n netvar_name: netvar to get",
            "Returns:\n netvar as a handle"
        ]
    },

    "fatality.win get var float":{
        "prefix":       "get_var_float",
        "body":         "get_var_float(${1:netvar_name})",
        "description":  [
            "IMPORTANT!!! CURRENTLY BROKEN",
            "Syntax:\n netvar_name: netvar to get",
            "Returns:\n netvar as a floating point value"
        ]
    },

    "fatality.win get var bool":{
        "prefix":       "get_var_bool",
        "body":         "get_var_bool(${1:netvar_name})",
        "description":  [
            "IMPORTANT!!! CURRENTLY BROKEN",
            "Syntax:\n netvar_name: netvar to get",
            "Returns:\n netvar as a boolean value"
        ]
    },

    "fatality.win get var vector":{
        "prefix":       "get_var_vector",
        "body":         "get_var_vector(${1:netvar_name})",
        "description":  [
            "IMPORTANT!!! CURRENTLY BROKEN",
            "Syntax:\n netvar_name: netvar to get",
            "Returns:\n netvar as a csgo.vector3 value"
        ]
    },

    "fatality.win get var angle":{
        "prefix":       "get_var_angle",
        "body":         "get_var_angle(${1:netvar_name})",
        "description":  [
            "IMPORTANT!!! CURRENTLY BROKEN",
            "Syntax:\n netvar_name: netvar to get",
            "Returns:\n netvar as a csgo.angle value"
        ]
    },

    //------------------------------------------
    // Player functions
    //------------------------------------------

    "fatality.win get name": {
        "prefix":       "get_name",
        "body":         "get_name()",
        "description":  "Returns:\n players name"
    },

    "fatality.win get eye pos": {
        "prefix":       "get_eye_pos",
        "body":         "get_eye_pos()",
        "description":  "Returns:\n players eye position as a csgo.vector3 object"
    },
    
    "fatality.win is alive": {
        "prefix":       "is_alive",
        "body":         "is_alive()",
        "description":  "Returns:\n true if player is alive"
    },

    "fatality.win get hitbox pos": {
        "prefix":       "get_hitbox_pos",
        "body":         "get_hitbox_pos(${1|hitbox,0--[[head]],1--[[neck]],2--[[pelvis]],3--[[body]],4--[[thorax]],5--[[chest]],6--[[upperchest]],7--[[left thigh]],8--[[right thigh]],9--[[left calf]],10--[[right calf]],11--[[left foot]],12--[[right foot]],13--[[left hand]],14--[[right hand]],15--[[left upper arm]],16--[[left forearm]],17--[[right upper arm]],18--[[right forearm]]|})",
        "description":  [
            "Syntax:\n hitbox: hitbox index",
            "Returns:\n players hitbox position as a csgo.vector3 object"
        ]
    },
}